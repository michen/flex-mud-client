<?xml version="1.0" encoding="utf-8"?>
<flexlib:MDIWindow		 
	backgroundColor="0xc0c0c0"
	width="600" height="600"
	showCloseButton="true"
	xmlns:flexlib="http://code.google.com/p/flexlib/"	
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:mx="http://www.adobe.com/2006/mxml"	 	
	name="mapperWindow"		
 	creationComplete="init()"
 	title="{oMapModel.oMap.map_name}"
 	styleName="standardPadding"		 	
 	
>


  <mx:Script>
  <![CDATA[
  	import com.simian.telnet.TelnetEvent;
  	import com.simian.mapper.MapperModel;
  	import mx.collections.ArrayCollection;
  	import com.simian.mapper.Exit;
  	
  	import mx.binding.utils.ChangeWatcher;
  	
  	import com.simian.mapper.Room;
  	import com.simian.mapper.MapperEvent;
  	
  	import com.simian.mapper.Map;

	[Bindable]
	public var oMapModel : MapperModel;
		  
  	private var current_watcher:ChangeWatcher;
  	private var selected_watcher:ChangeWatcher;
  
 	
 	private function init() : void { 				
 		
 		current_watcher = ChangeWatcher.watch(oMapModel,"current_room",currentRoomChange); 
		selected_watcher = ChangeWatcher.watch(oMapModel,"selected_room",selectedRoomChange); 				  		
 		
 		this.addEventListener(KeyboardEvent.KEY_UP,keyListener);
 		 		
 	} 

	
	private function keyListener(event:KeyboardEvent) : void {
		
		// if they are on the main map tab and they hit a direction move em...		
		if (mapTabs.selectedIndex == 0) {			
			if (event.keyCode == 38 || event.keyCode == 104) attemptMove('north');
			else if (event.keyCode == 39 || event.keyCode == 102) attemptMove('east');
			else if (event.keyCode == 40 || event.keyCode == 98) attemptMove('south');
			else if (event.keyCode == 37 || event.keyCode == 100) attemptMove('west');			
			else if (event.keyCode == 107) attemptMove('up');
			else if (event.keyCode == 109) attemptMove('down');
		}
		

	}

 	private function attemptMove(direction : String) : void {
 		var oExit : Exit = oMapModel.current_room.findExit(direction);
 		var cmd : String; 		 		
 		if (oExit != null) cmd = oExit.command;
 		else cmd = direction;

		// send command event
		var telnetEvent : TelnetEvent = new TelnetEvent(TelnetEvent.SEND_DATA);
		telnetEvent.data = cmd;			
		dispatchEvent(telnetEvent);		
 			
 	}
 	

 	// every time we change room call this...
 	private function currentRoomChange(e:Event = null) : void {
 		
 		// if they are still on the initial map see if we can find them in a saved map
 		if(oMapModel.current_room.oMap.map_name == "temporary map") oMapModel.findMe();
 		
 		if (oMapModel.current_room != null) {
 			 			
 			currentRoomEditor.roomChange(oMapModel.current_room);	 			 	
	 		
 			mapview.changeRoom();
 			
 			// handle map change if we've moved to a new map...
 			if (selected_map.selectedItem != oMapModel.current_room.oMap) selected_map.selectedItem = oMapModel.current_room.oMap;
 			
 		}
 		
 	}
 	

 	// every time we change room call this...
 	private function selectedRoomChange(e:Event = null) : void {
 		
 		if (oMapModel.selected_room != null) { 					
			selectedRoomEditor.roomChange(oMapModel.selected_room); 		
 		}
 		
 	}
 	
 

 
 	
 	private function find() : void { 		 		
    	oMapModel.findMe();	
 	}
  
  
  	private function deleteSelected() : void {
  		if (oMapModel.selected_room != null) oMapModel.removeRoom(oMapModel.selected_room);
  		oMapModel.selected_room = null;
  	}
  	
  	private function mapChange() : void {
  		oMapModel.oMap = selected_map.selectedItem as Map;
  		oMapModel.bMappingEnabled = false;
  		
  		oMapModel.setCurrentRoom(oMapModel.oMap.getRoom(0,0,0));  		  		
  		oMapModel.lastRoom = oMapModel.current_room;
  		
  		currentRoomChange();  		
  	}

  	private function mapDelete() : void {
  		trace('ruh roh, map deleting time');  		
  	}
  	
  	private function newMap() : void {
  		// make sure they've entered a name for this new map
  		if (selected_map.inputText != null && selected_map.inputText.length > 0) {			
			oMapModel.newMap(selected_map.inputText);
  		}
  	}  	


  	private function renameMap() : void {
  		if (selected_map.inputText != null && selected_map.inputText.length > 0) oMapModel.oMap.map_name = selected_map.inputText;
  	}  	  
  	
  	private function joinMap() : void {
  		oMapModel.linkMap();
  	}
  	
  	private function mergeRoom() : void {
  		oMapModel.mergeOtherRoom();
  	}
  	
  	private function mapUp() : void {
  		mapview.changeLayer(mapview.map_current_height+1);
  	}
  	
  	private function mapDown() : void {
  		mapview.changeLayer(mapview.map_current_height-1);
  	}
  	
  	private function updateToolTip(event:MapperEvent) : void {
  		
  		mapview.toolTip=event.room.room_name;  		
  		if (event.room.room_notes != null) mapview.toolTip += '\n' + event.room.room_notes;
  		
  	}
  
  ]]>  
  </mx:Script>
	
		
	<mate:Listener type="{MapperEvent.MOUSE_OVER_ROOM}" receive="updateToolTip(event)" />	
	
	
	<mx:TabNavigator id="mapTabs" width="100%" height="100%" verticalGap="2" paddingTop="2" creationPolicy="all">

		<mx:VBox label="Map" styleName="standardPadding" >

			<mx:HBox width="100%">
				<extended:EditableComboBox id="selected_map" width="100" change="mapChange()" dataProvider="{oMapModel.aMaps}" labelField="map_name" editable="true" xmlns:extended="com.simian.extendedComponents.*" />
				<mx:Button label="New Map" click="newMap()" />
				<mx:Button label="Rename Map" click="renameMap()" />
				<mx:Button label="Join Map" click="joinMap()" />
				<mx:Spacer width="100%" />
				<mx:Button label="Delete Map" />		
			</mx:HBox>
			
			<mapper:MapView 
			xmlns:mapper="com.simian.mapper.*" 						
			width="100%" 
			height="100%" 
			id="mapview" 				
			oMapModel = "{oMapModel}"
		/>
		
			

			<mx:HBox width="100%">
				<mx:CheckBox label="Auto Mapping" selected="{oMapModel.bMappingEnabled}" id="bAutomap" click="oMapModel.bMappingEnabled=bAutomap.selected" />
				<mx:CheckBox label="Auto Moving" selected="{oMapModel.bAutoMove}" id="autoMove" click="oMapModel.bAutoMove=autoMove.selected" />								
				<mx:CheckBox label="Two Way Exits" selected="{oMapModel.bTwoWayExits}" id="twoWayExits" click="oMapModel.bTwoWayExits=twoWayExits.selected" />
			</mx:HBox>			
			
			<mx:HBox width="100%">
				<mx:Button label="Find Room" click="find()" />
				<mx:Button label="Up" click="mapUp()" />
				<mx:Button label="Down" click="mapDown()" />
				
				<mx:Spacer width="100%" />
				<mx:Button label="Merge Room" click="mergeRoom()" />				
				<mx:Button label="Delete Room" click="deleteSelected()" />	
			</mx:HBox>
				
		</mx:VBox>
		
		
		
		<window:RoomEditor 
			xmlns:window="com.simian.window.*"
			label="Current Room"
			id="currentRoomEditor" />


		<window:RoomEditor 
			xmlns:window="com.simian.window.*"
			label="Selected Room"
			id="selectedRoomEditor" />


		
	</mx:TabNavigator>
	
	
	
				
</flexlib:MDIWindow>
